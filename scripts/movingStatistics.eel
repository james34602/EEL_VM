//printf("%d\n", $MEMBLKLIMIT);
filename = "../sgscSmallMono.wav";
x1 = 0;
suc = decodeWavFromFile(filename, ch, fs, frameCount, x1);
(suc <= 0) ? printf("%d\n", suc) : printf("frameCountPerChannel = %d\n%d %d %d %d %d %d\n", frameCount, x1);
cnt = 0;
while ($MEMBLKLIMIT * cnt <= x1 + frameCount) (cnt += 1; );
memlim = $MEMBLKLIMIT * cnt;
y1 = (x2 + frameCount < memlim) ? (x2 + frameCount) : (memlim);
y2 = (y1 + frameCount < memlim) ? (y1 + frameCount) : (memlim);
y3 = (y2 + frameCount < memlim) ? (y2 + frameCount) : (memlim);
y4 = (y3 + frameCount < memlim) ? (y3 + frameCount) : (memlim);
minMaxFilt = y4 + frameCount;
printf("frameCountPerChannel = %d\n%d %d %d %d %d %d\n", frameCount, y1, y2, y3, y4);
windowSize = 500;
transition = (2.0 * 20.0) / fs;
memSize1 = movingMinMaxInit(minMaxFilt, windowSize);
buf_minmax = minMaxFilt + memSize1;
medFilt = buf_minmax + 2;
memSize2 = movingMedianInit(medFilt, windowSize);
hil = medFilt + memSize2;
size = iirHilbertInit(hil, 4, transition);
buf_cplx = hil + size;
pwr = 0;
loop(frameCount,
movingMinMaxProcess(minMaxFilt, x1[idx], buf_minmax);
y3[idx] = movingMedianProcess(medFilt, x1[idx]);
iirHilbertProcess(hil, x1[idx], buf_cplx);
pwr = pwr * 0.9 + hypot(buf_cplx[0], buf_cplx[1]) * 0.1;
y1[idx] = buf_minmax[0];
y2[idx] = buf_minmax[1];
y4[idx] = pwr;
idx += 1;
);
suc = writeWavToFile("statistic.wav", 4, fs, frameCount, y1, y2, y3, y4);
//listSystemVariable();
//printf("%d\n", $MEMBLKLIMIT);
function db2mag(db)
(
  pow(10, db / 20);
);
filename = "../M800000t8Aj63zH8A7.wav";
x1 = 0;
suc = decodeWavFromFile(filename, ch, fs, frameCount, x1);
(suc <= 0) ? printf("%d\n", suc) : printf("frameCountPerChannel = %d\n%d %d %d %d %d %d\n", frameCount, x1);
cnt = 0;
while ($MEMBLKLIMIT * cnt <= x1 + frameCount) (cnt += 1; );
memlim = $MEMBLKLIMIT * cnt;
y1 = (x2 + frameCount < memlim) ? (x2 + frameCount) : (memlim);
y2 = (y1 + frameCount < memlim) ? (y1 + frameCount) : (memlim);
y3 = (y2 + frameCount < memlim) ? (y2 + frameCount) : (memlim);
y4 = (y3 + frameCount < memlim) ? (y3 + frameCount) : (memlim);
hil = y4 + frameCount;
printf("frameCountPerChannel = %d\n%d %d %d %d %d %d\n", frameCount, y1, y2, y3, y4);
transition = (2.0 * 20.0) / fs;
size1 = iirHilbertInit(hil, 16, 0.2);
buf_cplx = hil + size1;
sines_s = buf_cplx + 2;
size2 = SineSInit(sines_s, -50, fs);
cs_cplx = sines_s + size2;
svf = cs_cplx + 2;
size3 = SVFInit(svf);
SVFSetParam(svf, 48000, 1000, 0.009);
gain = db2mag(30);
printf("sines_s size = %d\n", size2);
loop(frameCount,
iirHilbertProcess(hil, x1[idx], buf_cplx);
SineSProcessCplx(sines_s, cs_cplx);
//y1[idx] = SVFPeakProcess(svf, x1[idx], gain);
//y1[idx] = SVFProcess(svf, x1[idx], 0);
y2[idx] = cs_cplx[0] * buf_cplx[0] - cs_cplx[1] * buf_cplx[1];
y1[idx] = x1[idx];
//y1[idx] = buf_cplx[0];
//y2[idx] = buf_cplx[1];
//y3[idx] = SineSProcessReal(sines_s);
y3[idx] = cs_cplx[0];
y4[idx] = cs_cplx[1];
idx += 1;
);
suc = writeWavToFile("statistic.wav", 4, fs, frameCount, y1, y2, y3, y4);
//listSystemVariable();